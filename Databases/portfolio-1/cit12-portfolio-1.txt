\set ON_ERROR_STOP on



BEGIN;

BEGIN
\i ./tests/profile-test.sql

-- ============================================

-- SEED DATA

-- ============================================



-- Known UUIDs for consistent tests

INSERT INTO profile.account (id, email, username, password_hash)

VALUES 

  ('11111111-1111-1111-1111-111111111111', 'alice@example.com', 'alice', 'pw_alice'),

  ('22222222-2222-2222-2222-222222222222', 'bob@example.com',   'bob',   'pw_bob')

ON CONFLICT (username) DO NOTHING;

INSERT 0 2


-- ============================================

-- TEST ACCOUNT PROCEDURES

-- ============================================



-- Should create a new account "charlie"

CALL api.create_account('charlie@example.com', 'charlie', 'pw_charlie');

CALL


-- Attempt to delete an existing account

CALL api.delete_account('22222222-2222-2222-2222-222222222222');

psql:tests/profile-test.sql:17: NOTICE:  Created account with id 900733f9-02a2-40f7-aa77-2e772041dc13
CALL


-- Attempt to delete a non-existing account (should raise exception)

DO $$

BEGIN

    BEGIN

        CALL api.delete_account('99999999-9999-9999-9999-999999999999');

    EXCEPTION WHEN OTHERS THEN

        RAISE NOTICE 'Expected error deleting non-existent account: %', SQLERRM;

    END;

END;

$$;

psql:tests/profile-test.sql:20: NOTICE:  Deleted account 22222222-2222-2222-2222-222222222222
psql:tests/profile-test.sql:31: NOTICE:  Expected error deleting non-existent account: Account 99999999-9999-9999-9999-999999999999 does not exist
DO


-- ============================================

-- TEST ACCOUNTS VIEW & PAGINATION

-- ============================================



-- All accounts

SELECT * FROM api.get_all_accounts;

                  id                  |        email        | username |         created_at         
--------------------------------------+---------------------+----------+----------------------------
 11111111-1111-1111-1111-111111111111 | alice@example.com   | alice    | 2025-10-04 15:26:20.997226
 900733f9-02a2-40f7-aa77-2e772041dc13 | charlie@example.com | charlie  | 2025-10-04 15:26:20.997226
(2 rows)



-- First 2 accounts

SELECT * FROM api.get_accounts(2, 0);

                  id                  |        email        | username |         created_at         
--------------------------------------+---------------------+----------+----------------------------
 11111111-1111-1111-1111-111111111111 | alice@example.com   | alice    | 2025-10-04 15:26:20.997226
 900733f9-02a2-40f7-aa77-2e772041dc13 | charlie@example.com | charlie  | 2025-10-04 15:26:20.997226
(2 rows)



-- Next page

SELECT * FROM api.get_accounts(2, 2);

 id | email | username | created_at 
----+-------+----------+------------
(0 rows)



-- ============================================================

-- TESTING BOOKMARKS (Titles + Persons)

-- ============================================================



-- Add a title bookmark for Alice

SELECT api.add_bookmark(

  '11111111-1111-1111-1111-111111111111'::uuid, -- account_id

  '11111111-2222-3333-4444-555555555555'::uuid, -- title_id

  'title'::bookmark_target

);

 add_bookmark 
--------------
 
(1 row)



-- Add another title bookmark

SELECT api.add_bookmark(

  '11111111-1111-1111-1111-111111111111'::uuid,

  '66666666-7777-8888-9999-000000000000'::uuid,

  'title'::bookmark_target

);

 add_bookmark 
--------------
 
(1 row)



-- Try adding the same bookmark again (should raise NOTICE, not duplicate)

SELECT api.add_bookmark(

  '11111111-1111-1111-1111-111111111111'::uuid,

  '11111111-2222-3333-4444-555555555555'::uuid,

  'title'::bookmark_target

);

psql:tests/profile-test.sql:69: NOTICE:  Bookmark already exists for account 11111111-1111-1111-1111-111111111111, target 11111111-2222-3333-4444-555555555555 (title). Use api.update_bookmark_note instead.
 add_bookmark 
--------------
 
(1 row)



-- Add a person bookmark

SELECT api.add_bookmark(

  '11111111-1111-1111-1111-111111111111'::uuid,

  'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'::uuid,

  'person'::bookmark_target

);

 add_bookmark 
--------------
 
(1 row)



-- Update the note on the first title bookmark

SELECT api.update_bookmark_note(

  '11111111-1111-1111-1111-111111111111'::uuid,

  '11111111-2222-3333-4444-555555555555'::uuid,

  'title'::bookmark_target,

  '{"text": "Changed my mind"}'

);

 update_bookmark_note 
----------------------
 
(1 row)



-- Update the note on the person bookmark

SELECT api.update_bookmark_note(

  '11111111-1111-1111-1111-111111111111'::uuid,

  'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'::uuid,

  'person'::bookmark_target,

  '{"text": "Favourite actor"}'

);

 update_bookmark_note 
----------------------
 
(1 row)



-- Remove note from title bookmark (set back to NULL)

SELECT api.update_bookmark_note(

  '11111111-1111-1111-1111-111111111111'::uuid,

  '11111111-2222-3333-4444-555555555555'::uuid,

  'title'::bookmark_target,

  NULL

);

 update_bookmark_note 
----------------------
 
(1 row)



-- Try updating a non-existing bookmark (should raise EXCEPTION)

DO $$

BEGIN

    BEGIN

        PERFORM api.update_bookmark_note(

          '11111111-1111-1111-1111-111111111111'::uuid,

          '99999999-aaaa-bbbb-cccc-111111111111'::uuid,

          'title'::bookmark_target,

          '{"text": "This should fail"}'

        );

    EXCEPTION WHEN OTHERS THEN

        RAISE NOTICE 'Expected error updating non-existent bookmark: %', SQLERRM;

    END;

END;

$$;

DO
psql:tests/profile-test.sql:116: NOTICE:  Expected error updating non-existent bookmark: No existing bookmark found for account 11111111-1111-1111-1111-111111111111, target 99999999-aaaa-bbbb-cccc-111111111111 (title).


-- Get all bookmarks for Alice

SELECT * FROM api.get_bookmarks('11111111-1111-1111-1111-111111111111'::uuid);

              target_id               | target_type |            note             |          added_at          
--------------------------------------+-------------+-----------------------------+----------------------------
 11111111-2222-3333-4444-555555555555 | title       |                             | 2025-10-04 15:26:20.997226
 66666666-7777-8888-9999-000000000000 | title       |                             | 2025-10-04 15:26:20.997226
 aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee | person      | {"text": "Favourite actor"} | 2025-10-04 15:26:20.997226
(3 rows)



-- Get only title bookmarks

SELECT * FROM api.get_bookmarks('11111111-1111-1111-1111-111111111111'::uuid, 'title'::bookmark_target);

              target_id               | target_type | note |          added_at          
--------------------------------------+-------------+------+----------------------------
 11111111-2222-3333-4444-555555555555 | title       |      | 2025-10-04 15:26:20.997226
 66666666-7777-8888-9999-000000000000 | title       |      | 2025-10-04 15:26:20.997226
(2 rows)



-- Get only person bookmarks

SELECT * FROM api.get_bookmarks('11111111-1111-1111-1111-111111111111'::uuid, 'person'::bookmark_target);

              target_id               | target_type |            note             |          added_at          
--------------------------------------+-------------+-----------------------------+----------------------------
 aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee | person      | {"text": "Favourite actor"} | 2025-10-04 15:26:20.997226
(1 row)



-- ============================================

-- TEST SEARCH HISTORY

-- ============================================



-- Add searches

SELECT api.add_search_to_history('11111111-1111-1111-1111-111111111111'::uuid, 'matrix');

 add_search_to_history 
-----------------------
 
(1 row)

SELECT api.add_search_to_history('11111111-1111-1111-1111-111111111111'::uuid, 'harry potter');

 add_search_to_history 
-----------------------
 
(1 row)

-- Get AliceΓÇÖs searches (limit 5)

SELECT * FROM api.get_search_history('11111111-1111-1111-1111-111111111111'::uuid, 5, 0);

    query     |        searched_at         
--------------+----------------------------
 matrix       | 2025-10-04 15:26:20.997226
 harry potter | 2025-10-04 15:26:20.997226
(2 rows)



-- ============================================

-- TEST RATINGS

-- ============================================



-- Add rating for Alice

SELECT api.add_rating(

  '11111111-1111-1111-1111-111111111111'::uuid,

  '22222222-3333-4444-5555-666666666666'::uuid, -- UUID for a title

  8,

  'Pretty good'

);

 add_rating 
------------
 
(1 row)



-- Update same rating

SELECT api.add_rating(

  '11111111-1111-1111-1111-111111111111'::uuid,

  '22222222-3333-4444-5555-666666666666'::uuid,

  9,

  'Even better'

);

 add_rating 
------------
 
(1 row)



-- Add another rating

SELECT api.add_rating(

  '11111111-1111-1111-1111-111111111111'::uuid,

  '77777777-8888-9999-0000-aaaaaaaaaaaa'::uuid, -- another title UUID

  5,

  'Meh'

);

 add_rating 
------------
 
(1 row)



-- Get AliceΓÇÖs ratings

SELECT * FROM api.get_ratings_by_account_id(

  '11111111-1111-1111-1111-111111111111'::uuid,

  10,

  0

);

               title_id               | rating |   comment   |         created_at         
--------------------------------------+--------+-------------+----------------------------
 22222222-3333-4444-5555-666666666666 |      9 | Even better | 2025-10-04 15:26:20.997226
 77777777-8888-9999-0000-aaaaaaaaaaaa |      5 | Meh         | 2025-10-04 15:26:20.997226
(2 rows)





-- ============================================

-- TEST MATERIALIZED VIEW

-- ============================================



-- Refresh to ensure up-to-date averages

REFRESH MATERIALIZED VIEW api.title_avg_ratings;

REFRESH MATERIALIZED VIEW


-- Check aggregated ratings

SELECT * FROM api.title_avg_ratings ORDER BY avg_rating DESC;
               title_id               |     avg_rating     | num_ratings 
--------------------------------------+--------------------+-------------
 22222222-3333-4444-5555-666666666666 | 9.0000000000000000 |           1
 77777777-8888-9999-0000-aaaaaaaaaaaa | 5.0000000000000000 |           1
(2 rows)

\i ./tests/movie-db-tests.sql

-- ============================================

-- B2_function_tests.sql (UUIDs with explicit casts)

-- ============================================



-- ============================================

-- Seed test data

-- ============================================



-- Titles

INSERT INTO movie_db.title (id, legacy_id, title_type, primary_title, plot)

VALUES 

  ('11111111-1111-1111-1111-111111111111'::uuid, 'seed1', 'movie', 'Test Movie A', 'A hero saves the world'),

  ('22222222-2222-2222-2222-222222222222'::uuid, 'seed2', 'movie', 'Test Movie B', 'A villain takes over'),

  ('33333333-3333-3333-3333-333333333333'::uuid, 'seed3', 'movie', 'Romantic Movie', 'A love story plot');

INSERT 0 3


-- Genres

INSERT INTO movie_db.genre (id, title_id, genre) VALUES

  ('aaaa1111-0000-0000-0000-000000000001'::uuid, '11111111-1111-1111-1111-111111111111'::uuid, 'Action'),

  ('aaaa1111-0000-0000-0000-000000000002'::uuid, '22222222-2222-2222-2222-222222222222'::uuid, 'Action'),

  ('aaaa1111-0000-0000-0000-000000000003'::uuid, '33333333-3333-3333-3333-333333333333'::uuid, 'Romance');

INSERT 0 3


-- Persons

INSERT INTO movie_db.person (id, legacy_id, primary_name) VALUES

  ('44444444-4444-4444-4444-444444444444'::uuid, 'pseed1', 'Actor A'),

  ('55555555-5555-5555-5555-555555555555'::uuid, 'pseed2', 'Actor B'),

  ('66666666-6666-6666-6666-666666666666'::uuid, 'pseed3', 'Actor C');

INSERT 0 3


-- Actors (roles)

INSERT INTO movie_db.actor (id, title_id, person_id, character_name) VALUES

  ('aaaa2222-0000-0000-0000-000000000001'::uuid, '11111111-1111-1111-1111-111111111111'::uuid, '44444444-4444-4444-4444-444444444444'::uuid, 'Hero'),

  ('aaaa2222-0000-0000-0000-000000000002'::uuid, '11111111-1111-1111-1111-111111111111'::uuid, '55555555-5555-5555-5555-555555555555'::uuid, 'Sidekick'),

  ('aaaa2222-0000-0000-0000-000000000003'::uuid, '22222222-2222-2222-2222-222222222222'::uuid, '55555555-5555-5555-5555-555555555555'::uuid, 'Villain'),

  ('aaaa2222-0000-0000-0000-000000000004'::uuid, '22222222-2222-2222-2222-222222222222'::uuid, '66666666-6666-6666-6666-666666666666'::uuid, 'Victim');

INSERT 0 4


-- Word index

INSERT INTO movie_db.word_index (id, legacy_id, title_id, word, field) VALUES

  ('aaaa3333-0000-0000-0000-000000000001'::uuid, 'w1', '11111111-1111-1111-1111-111111111111'::uuid, 'hero', 'p'),

  ('aaaa3333-0000-0000-0000-000000000002'::uuid, 'w2', '22222222-2222-2222-2222-222222222222'::uuid, 'villain', 'p');

INSERT 0 2


-- ============================================

-- Function Tests

-- ============================================



-- First rating

SELECT *

FROM api.add_user_title_rating(

  '77777777-7777-7777-7777-777777777777'::uuid,  -- account 1

  '11111111-1111-1111-1111-111111111111'::uuid,  -- title

  8                                              -- rating

);

             out_title_id             | average_rating | num_votes 
--------------------------------------+----------------+-----------
 11111111-1111-1111-1111-111111111111 |              8 |         1
(1 row)



-- Second rating

SELECT *

FROM api.add_user_title_rating(

  '88888888-8888-8888-8888-888888888888'::uuid,  -- account 2

  '11111111-1111-1111-1111-111111111111'::uuid,  -- same title

  6                                              -- rating

);

             out_title_id             | average_rating | num_votes 
--------------------------------------+----------------+-----------
 11111111-1111-1111-1111-111111111111 |              7 |         2
(1 row)



-- Γ£à Expect: average_rating Γëê 7.0, num_votes = 2

SELECT *

FROM movie_db.rating

WHERE title_id = '11111111-1111-1111-1111-111111111111'::uuid;

               title_id               | average_rating | num_votes 
--------------------------------------+----------------+-----------
 11111111-1111-1111-1111-111111111111 |              7 |         2
(1 row)



-- Expect: average_rating Γëê 7.0, num_votes = 2

TABLE movie_db.rating;

               title_id               | average_rating | num_votes 
--------------------------------------+----------------+-----------
 11111111-1111-1111-1111-111111111111 |              7 |         2
(1 row)



-- 2. get_person_by_name

SELECT '--- api.get_person_by_name ---';

            ?column?            
--------------------------------
 --- api.get_person_by_name ---
(1 row)

SELECT * FROM api.get_person_by_name('Actor A');

              person_id               |  name   
--------------------------------------+---------
 44444444-4444-4444-4444-444444444444 | Actor A
(1 row)



-- 3. get_coplayers

SELECT '--- api.get_coplayers ---';

         ?column?          
---------------------------
 --- api.get_coplayers ---
(1 row)

SELECT * FROM api.get_coplayers('Actor B');

              person_id               | primary_name | frequency 
--------------------------------------+--------------+-----------
 44444444-4444-4444-4444-444444444444 | Actor A      |         1
 66666666-6666-6666-6666-666666666666 | Actor C      |         1
(2 rows)

-- Expect: Actor A and Actor C as co-players



-- 4. get_popular_co_actors

SELECT '--- api.get_popular_co_actors ---';

             ?column?              
-----------------------------------
 --- api.get_popular_co_actors ---
(1 row)

REFRESH MATERIALIZED VIEW movie_db.get_actor_avg_title_rating;

REFRESH MATERIALIZED VIEW
SELECT * FROM api.get_popular_co_actors('Actor B');

               actor_id               | actor_fullname | weighted_rating 
--------------------------------------+----------------+-----------------
 44444444-4444-4444-4444-444444444444 | Actor A        |            7.00
 66666666-6666-6666-6666-666666666666 | Actor C        |                
(2 rows)



-- 5. get_similar_movies

SELECT '--- api.get_similar_movies ---';

            ?column?            
--------------------------------
 --- api.get_similar_movies ---
(1 row)

SELECT * FROM api.get_similar_movies('11111111-1111-1111-1111-111111111111'::uuid, 10);

             sim_title_id             | primary_title  | jaccard_genre 
--------------------------------------+----------------+---------------
 22222222-2222-2222-2222-222222222222 | Test Movie B   |             1
 33333333-3333-3333-3333-333333333333 | Romantic Movie |             0
(2 rows)



-- 6. string_search_title

SELECT '--- api.string_search_title ---';

            ?column?             
---------------------------------
 --- api.string_search_title ---
(1 row)

SELECT * FROM api.string_search_title('hero');

               title_id               | primary_title 
--------------------------------------+---------------
 11111111-1111-1111-1111-111111111111 | Test Movie A
(1 row)



-- 7. structured_string_search

SELECT '--- api.structured_string_search ---';

               ?column?               
--------------------------------------
 --- api.structured_string_search ---
(1 row)

SELECT * FROM api.structured_string_search('Romantic', NULL, NULL, NULL);

               title_id               | primary_title  
--------------------------------------+----------------
 33333333-3333-3333-3333-333333333333 | Romantic Movie
(1 row)



-- 8. person_words

SELECT '--- api.person_words ---';

         ?column?         
--------------------------
 --- api.person_words ---
(1 row)

SELECT * FROM api.person_words('Actor A', 5);

 word | frequency 
------+-----------
 hero |         1
(1 row)



-- 9. exact_match_query

SELECT '--- api.exact_match_query ---';

           ?column?            
-------------------------------
 --- api.exact_match_query ---
(1 row)

SELECT * FROM api.exact_match_query(ARRAY['hero']);

               title_id               | primary_title 
--------------------------------------+---------------
 11111111-1111-1111-1111-111111111111 | Test Movie A
(1 row)



-- 10. best_match_query

SELECT '--- api.best_match_query ---';

           ?column?           
------------------------------
 --- api.best_match_query ---
(1 row)

SELECT * FROM api.best_match_query(ARRAY['hero','villain']);

               title_id               | primary_title | match_count 
--------------------------------------+---------------+-------------
 11111111-1111-1111-1111-111111111111 | Test Movie A  |           1
 22222222-2222-2222-2222-222222222222 | Test Movie B  |           1
(2 rows)



-- 11. word_to_words_query

SELECT '--- api.word_to_words_query ---';

            ?column?             
---------------------------------
 --- api.word_to_words_query ---
(1 row)

SELECT * FROM api.word_to_words_query(ARRAY['hero'], 10);

 word | frequency 
------+-----------
 hero |         1
(1 row)



-- ============================================

-- End of tests

-- ============================================

ROLLBACK;
ROLLBACK
\set ON_ERROR_STOP on



BEGIN;

BEGIN
\i ./tests/moviedb-port-test.sql

-- ============================================

-- VERIFICATION QUERIES

-- ============================================

SELECT 'Titles migrated:' AS info, COUNT(*) AS count FROM movie_db.title;

       info       | count  
------------------+--------
 Titles migrated: | 158999
(1 row)

SELECT 'Episodes migrated:' AS info, COUNT(*) AS count FROM movie_db.episode;

        info        | count 
--------------------+-------
 Episodes migrated: | 92449
(1 row)

SELECT 'Genres migrated:' AS info, COUNT(*) AS count FROM movie_db.genre;

       info       | count  
------------------+--------
 Genres migrated: | 281474
(1 row)

SELECT 'Ratings migrated:' AS info, COUNT(*) AS count FROM movie_db.rating;

       info        | count 
-------------------+-------
 Ratings migrated: | 91255
(1 row)

SELECT 'Persons migrated:' AS info, COUNT(*) AS count FROM movie_db.person;

       info        | count  
-------------------+--------
 Persons migrated: | 513987
(1 row)

SELECT 'Actors migrated:' AS info, COUNT(*) AS count FROM movie_db.actor;

       info       | count  
------------------+--------
 Actors migrated: | 950135
(1 row)

SELECT 'Crew migrated:' AS info, COUNT(*) AS count FROM movie_db.crew;
      info      | count  
----------------+--------
 Crew migrated: | 894754
(1 row)

ROLLBACK;
ROLLBACK
